//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión del motor en tiempo de ejecución:2.0.50727.5456
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace CLSRPT.PRODUCTOS {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DTDatosProductos")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DTDatosProductos : global::System.Data.DataSet {
        
        private FAMI_FAMILIADataTable tableFAMI_FAMILIA;
        
        private SUFA_SUB_FAMILIASDataTable tableSUFA_SUB_FAMILIAS;
        
        private PROD_PRODUCTOSDataTable tablePROD_PRODUCTOS;
        
        private global::System.Data.DataRelation relationFAMI_FAMILIA_SUFA_SUB_FAMILIAS;
        
        private global::System.Data.DataRelation relationSUFA_SUB_FAMILIAS_PROD_PRODUCTOS;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DTDatosProductos() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DTDatosProductos(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["FAMI_FAMILIA"] != null)) {
                    base.Tables.Add(new FAMI_FAMILIADataTable(ds.Tables["FAMI_FAMILIA"]));
                }
                if ((ds.Tables["SUFA_SUB_FAMILIAS"] != null)) {
                    base.Tables.Add(new SUFA_SUB_FAMILIASDataTable(ds.Tables["SUFA_SUB_FAMILIAS"]));
                }
                if ((ds.Tables["PROD_PRODUCTOS"] != null)) {
                    base.Tables.Add(new PROD_PRODUCTOSDataTable(ds.Tables["PROD_PRODUCTOS"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FAMI_FAMILIADataTable FAMI_FAMILIA {
            get {
                return this.tableFAMI_FAMILIA;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SUFA_SUB_FAMILIASDataTable SUFA_SUB_FAMILIAS {
            get {
                return this.tableSUFA_SUB_FAMILIAS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PROD_PRODUCTOSDataTable PROD_PRODUCTOS {
            get {
                return this.tablePROD_PRODUCTOS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            DTDatosProductos cln = ((DTDatosProductos)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["FAMI_FAMILIA"] != null)) {
                    base.Tables.Add(new FAMI_FAMILIADataTable(ds.Tables["FAMI_FAMILIA"]));
                }
                if ((ds.Tables["SUFA_SUB_FAMILIAS"] != null)) {
                    base.Tables.Add(new SUFA_SUB_FAMILIASDataTable(ds.Tables["SUFA_SUB_FAMILIAS"]));
                }
                if ((ds.Tables["PROD_PRODUCTOS"] != null)) {
                    base.Tables.Add(new PROD_PRODUCTOSDataTable(ds.Tables["PROD_PRODUCTOS"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableFAMI_FAMILIA = ((FAMI_FAMILIADataTable)(base.Tables["FAMI_FAMILIA"]));
            if ((initTable == true)) {
                if ((this.tableFAMI_FAMILIA != null)) {
                    this.tableFAMI_FAMILIA.InitVars();
                }
            }
            this.tableSUFA_SUB_FAMILIAS = ((SUFA_SUB_FAMILIASDataTable)(base.Tables["SUFA_SUB_FAMILIAS"]));
            if ((initTable == true)) {
                if ((this.tableSUFA_SUB_FAMILIAS != null)) {
                    this.tableSUFA_SUB_FAMILIAS.InitVars();
                }
            }
            this.tablePROD_PRODUCTOS = ((PROD_PRODUCTOSDataTable)(base.Tables["PROD_PRODUCTOS"]));
            if ((initTable == true)) {
                if ((this.tablePROD_PRODUCTOS != null)) {
                    this.tablePROD_PRODUCTOS.InitVars();
                }
            }
            this.relationFAMI_FAMILIA_SUFA_SUB_FAMILIAS = this.Relations["FAMI_FAMILIA_SUFA_SUB_FAMILIAS"];
            this.relationSUFA_SUB_FAMILIAS_PROD_PRODUCTOS = this.Relations["SUFA_SUB_FAMILIAS_PROD_PRODUCTOS"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DTDatosProductos";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DTDatosProductos.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableFAMI_FAMILIA = new FAMI_FAMILIADataTable();
            base.Tables.Add(this.tableFAMI_FAMILIA);
            this.tableSUFA_SUB_FAMILIAS = new SUFA_SUB_FAMILIASDataTable();
            base.Tables.Add(this.tableSUFA_SUB_FAMILIAS);
            this.tablePROD_PRODUCTOS = new PROD_PRODUCTOSDataTable();
            base.Tables.Add(this.tablePROD_PRODUCTOS);
            this.relationFAMI_FAMILIA_SUFA_SUB_FAMILIAS = new global::System.Data.DataRelation("FAMI_FAMILIA_SUFA_SUB_FAMILIAS", new global::System.Data.DataColumn[] {
                        this.tableFAMI_FAMILIA.COD_FAMIColumn}, new global::System.Data.DataColumn[] {
                        this.tableSUFA_SUB_FAMILIAS.COD_FAMIColumn}, false);
            this.Relations.Add(this.relationFAMI_FAMILIA_SUFA_SUB_FAMILIAS);
            this.relationSUFA_SUB_FAMILIAS_PROD_PRODUCTOS = new global::System.Data.DataRelation("SUFA_SUB_FAMILIAS_PROD_PRODUCTOS", new global::System.Data.DataColumn[] {
                        this.tableSUFA_SUB_FAMILIAS.COD_FAMIColumn,
                        this.tableSUFA_SUB_FAMILIAS.COD_SUFAColumn}, new global::System.Data.DataColumn[] {
                        this.tablePROD_PRODUCTOS.COD_FAMIColumn,
                        this.tablePROD_PRODUCTOS.COD_SUFAColumn}, false);
            this.Relations.Add(this.relationSUFA_SUB_FAMILIAS_PROD_PRODUCTOS);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFAMI_FAMILIA() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSUFA_SUB_FAMILIAS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePROD_PRODUCTOS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DTDatosProductos ds = new DTDatosProductos();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void FAMI_FAMILIARowChangeEventHandler(object sender, FAMI_FAMILIARowChangeEvent e);
        
        public delegate void SUFA_SUB_FAMILIASRowChangeEventHandler(object sender, SUFA_SUB_FAMILIASRowChangeEvent e);
        
        public delegate void PROD_PRODUCTOSRowChangeEventHandler(object sender, PROD_PRODUCTOSRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FAMI_FAMILIADataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCOD_FAMI;
            
            private global::System.Data.DataColumn columnNOMBRE_FAMI;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FAMI_FAMILIADataTable() {
                this.TableName = "FAMI_FAMILIA";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FAMI_FAMILIADataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FAMI_FAMILIADataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COD_FAMIColumn {
                get {
                    return this.columnCOD_FAMI;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NOMBRE_FAMIColumn {
                get {
                    return this.columnNOMBRE_FAMI;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FAMI_FAMILIARow this[int index] {
                get {
                    return ((FAMI_FAMILIARow)(this.Rows[index]));
                }
            }
            
            public event FAMI_FAMILIARowChangeEventHandler FAMI_FAMILIARowChanging;
            
            public event FAMI_FAMILIARowChangeEventHandler FAMI_FAMILIARowChanged;
            
            public event FAMI_FAMILIARowChangeEventHandler FAMI_FAMILIARowDeleting;
            
            public event FAMI_FAMILIARowChangeEventHandler FAMI_FAMILIARowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFAMI_FAMILIARow(FAMI_FAMILIARow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FAMI_FAMILIARow AddFAMI_FAMILIARow(string COD_FAMI, string NOMBRE_FAMI) {
                FAMI_FAMILIARow rowFAMI_FAMILIARow = ((FAMI_FAMILIARow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        COD_FAMI,
                        NOMBRE_FAMI};
                rowFAMI_FAMILIARow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFAMI_FAMILIARow);
                return rowFAMI_FAMILIARow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                FAMI_FAMILIADataTable cln = ((FAMI_FAMILIADataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FAMI_FAMILIADataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCOD_FAMI = base.Columns["COD_FAMI"];
                this.columnNOMBRE_FAMI = base.Columns["NOMBRE_FAMI"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCOD_FAMI = new global::System.Data.DataColumn("COD_FAMI", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOD_FAMI);
                this.columnNOMBRE_FAMI = new global::System.Data.DataColumn("NOMBRE_FAMI", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNOMBRE_FAMI);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("FAMI_FAMILIAKey1", new global::System.Data.DataColumn[] {
                                this.columnCOD_FAMI}, false));
                this.columnCOD_FAMI.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FAMI_FAMILIARow NewFAMI_FAMILIARow() {
                return ((FAMI_FAMILIARow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FAMI_FAMILIARow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(FAMI_FAMILIARow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FAMI_FAMILIARowChanged != null)) {
                    this.FAMI_FAMILIARowChanged(this, new FAMI_FAMILIARowChangeEvent(((FAMI_FAMILIARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FAMI_FAMILIARowChanging != null)) {
                    this.FAMI_FAMILIARowChanging(this, new FAMI_FAMILIARowChangeEvent(((FAMI_FAMILIARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FAMI_FAMILIARowDeleted != null)) {
                    this.FAMI_FAMILIARowDeleted(this, new FAMI_FAMILIARowChangeEvent(((FAMI_FAMILIARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FAMI_FAMILIARowDeleting != null)) {
                    this.FAMI_FAMILIARowDeleting(this, new FAMI_FAMILIARowChangeEvent(((FAMI_FAMILIARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFAMI_FAMILIARow(FAMI_FAMILIARow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DTDatosProductos ds = new DTDatosProductos();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FAMI_FAMILIADataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SUFA_SUB_FAMILIASDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCOD_FAMI;
            
            private global::System.Data.DataColumn columnCOD_SUFA;
            
            private global::System.Data.DataColumn columnNOMBRE_SUFA;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SUFA_SUB_FAMILIASDataTable() {
                this.TableName = "SUFA_SUB_FAMILIAS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SUFA_SUB_FAMILIASDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SUFA_SUB_FAMILIASDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COD_FAMIColumn {
                get {
                    return this.columnCOD_FAMI;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COD_SUFAColumn {
                get {
                    return this.columnCOD_SUFA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NOMBRE_SUFAColumn {
                get {
                    return this.columnNOMBRE_SUFA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SUFA_SUB_FAMILIASRow this[int index] {
                get {
                    return ((SUFA_SUB_FAMILIASRow)(this.Rows[index]));
                }
            }
            
            public event SUFA_SUB_FAMILIASRowChangeEventHandler SUFA_SUB_FAMILIASRowChanging;
            
            public event SUFA_SUB_FAMILIASRowChangeEventHandler SUFA_SUB_FAMILIASRowChanged;
            
            public event SUFA_SUB_FAMILIASRowChangeEventHandler SUFA_SUB_FAMILIASRowDeleting;
            
            public event SUFA_SUB_FAMILIASRowChangeEventHandler SUFA_SUB_FAMILIASRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSUFA_SUB_FAMILIASRow(SUFA_SUB_FAMILIASRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SUFA_SUB_FAMILIASRow AddSUFA_SUB_FAMILIASRow(FAMI_FAMILIARow parentFAMI_FAMILIARowByFAMI_FAMILIA_SUFA_SUB_FAMILIAS, string COD_SUFA, string NOMBRE_SUFA) {
                SUFA_SUB_FAMILIASRow rowSUFA_SUB_FAMILIASRow = ((SUFA_SUB_FAMILIASRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        COD_SUFA,
                        NOMBRE_SUFA};
                if ((parentFAMI_FAMILIARowByFAMI_FAMILIA_SUFA_SUB_FAMILIAS != null)) {
                    columnValuesArray[0] = parentFAMI_FAMILIARowByFAMI_FAMILIA_SUFA_SUB_FAMILIAS[0];
                }
                rowSUFA_SUB_FAMILIASRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSUFA_SUB_FAMILIASRow);
                return rowSUFA_SUB_FAMILIASRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SUFA_SUB_FAMILIASDataTable cln = ((SUFA_SUB_FAMILIASDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SUFA_SUB_FAMILIASDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCOD_FAMI = base.Columns["COD_FAMI"];
                this.columnCOD_SUFA = base.Columns["COD_SUFA"];
                this.columnNOMBRE_SUFA = base.Columns["NOMBRE_SUFA"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCOD_FAMI = new global::System.Data.DataColumn("COD_FAMI", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOD_FAMI);
                this.columnCOD_SUFA = new global::System.Data.DataColumn("COD_SUFA", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOD_SUFA);
                this.columnNOMBRE_SUFA = new global::System.Data.DataColumn("NOMBRE_SUFA", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNOMBRE_SUFA);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("SUFA_SUB_FAMILIASKey1", new global::System.Data.DataColumn[] {
                                this.columnCOD_FAMI,
                                this.columnCOD_SUFA}, false));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SUFA_SUB_FAMILIASRow NewSUFA_SUB_FAMILIASRow() {
                return ((SUFA_SUB_FAMILIASRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SUFA_SUB_FAMILIASRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SUFA_SUB_FAMILIASRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SUFA_SUB_FAMILIASRowChanged != null)) {
                    this.SUFA_SUB_FAMILIASRowChanged(this, new SUFA_SUB_FAMILIASRowChangeEvent(((SUFA_SUB_FAMILIASRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SUFA_SUB_FAMILIASRowChanging != null)) {
                    this.SUFA_SUB_FAMILIASRowChanging(this, new SUFA_SUB_FAMILIASRowChangeEvent(((SUFA_SUB_FAMILIASRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SUFA_SUB_FAMILIASRowDeleted != null)) {
                    this.SUFA_SUB_FAMILIASRowDeleted(this, new SUFA_SUB_FAMILIASRowChangeEvent(((SUFA_SUB_FAMILIASRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SUFA_SUB_FAMILIASRowDeleting != null)) {
                    this.SUFA_SUB_FAMILIASRowDeleting(this, new SUFA_SUB_FAMILIASRowChangeEvent(((SUFA_SUB_FAMILIASRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSUFA_SUB_FAMILIASRow(SUFA_SUB_FAMILIASRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DTDatosProductos ds = new DTDatosProductos();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SUFA_SUB_FAMILIASDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PROD_PRODUCTOSDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnID_ELEM;
            
            private global::System.Data.DataColumn columnCOD_FAMI;
            
            private global::System.Data.DataColumn columnCOD_SUFA;
            
            private global::System.Data.DataColumn columnCOD_BARRAS;
            
            private global::System.Data.DataColumn columnNOMBRE_PROD;
            
            private global::System.Data.DataColumn columnEXISTENCIAS_PROD;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROD_PRODUCTOSDataTable() {
                this.TableName = "PROD_PRODUCTOS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PROD_PRODUCTOSDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PROD_PRODUCTOSDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ID_ELEMColumn {
                get {
                    return this.columnID_ELEM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COD_FAMIColumn {
                get {
                    return this.columnCOD_FAMI;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COD_SUFAColumn {
                get {
                    return this.columnCOD_SUFA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COD_BARRASColumn {
                get {
                    return this.columnCOD_BARRAS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NOMBRE_PRODColumn {
                get {
                    return this.columnNOMBRE_PROD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EXISTENCIAS_PRODColumn {
                get {
                    return this.columnEXISTENCIAS_PROD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROD_PRODUCTOSRow this[int index] {
                get {
                    return ((PROD_PRODUCTOSRow)(this.Rows[index]));
                }
            }
            
            public event PROD_PRODUCTOSRowChangeEventHandler PROD_PRODUCTOSRowChanging;
            
            public event PROD_PRODUCTOSRowChangeEventHandler PROD_PRODUCTOSRowChanged;
            
            public event PROD_PRODUCTOSRowChangeEventHandler PROD_PRODUCTOSRowDeleting;
            
            public event PROD_PRODUCTOSRowChangeEventHandler PROD_PRODUCTOSRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPROD_PRODUCTOSRow(PROD_PRODUCTOSRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROD_PRODUCTOSRow AddPROD_PRODUCTOSRow(long ID_ELEM, string COD_FAMI, string COD_SUFA, string COD_BARRAS, string NOMBRE_PROD, long EXISTENCIAS_PROD) {
                PROD_PRODUCTOSRow rowPROD_PRODUCTOSRow = ((PROD_PRODUCTOSRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID_ELEM,
                        COD_FAMI,
                        COD_SUFA,
                        COD_BARRAS,
                        NOMBRE_PROD,
                        EXISTENCIAS_PROD};
                rowPROD_PRODUCTOSRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPROD_PRODUCTOSRow);
                return rowPROD_PRODUCTOSRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PROD_PRODUCTOSDataTable cln = ((PROD_PRODUCTOSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PROD_PRODUCTOSDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID_ELEM = base.Columns["ID_ELEM"];
                this.columnCOD_FAMI = base.Columns["COD_FAMI"];
                this.columnCOD_SUFA = base.Columns["COD_SUFA"];
                this.columnCOD_BARRAS = base.Columns["COD_BARRAS"];
                this.columnNOMBRE_PROD = base.Columns["NOMBRE_PROD"];
                this.columnEXISTENCIAS_PROD = base.Columns["EXISTENCIAS_PROD"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID_ELEM = new global::System.Data.DataColumn("ID_ELEM", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_ELEM);
                this.columnCOD_FAMI = new global::System.Data.DataColumn("COD_FAMI", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOD_FAMI);
                this.columnCOD_SUFA = new global::System.Data.DataColumn("COD_SUFA", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOD_SUFA);
                this.columnCOD_BARRAS = new global::System.Data.DataColumn("COD_BARRAS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOD_BARRAS);
                this.columnNOMBRE_PROD = new global::System.Data.DataColumn("NOMBRE_PROD", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNOMBRE_PROD);
                this.columnEXISTENCIAS_PROD = new global::System.Data.DataColumn("EXISTENCIAS_PROD", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEXISTENCIAS_PROD);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROD_PRODUCTOSRow NewPROD_PRODUCTOSRow() {
                return ((PROD_PRODUCTOSRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PROD_PRODUCTOSRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PROD_PRODUCTOSRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PROD_PRODUCTOSRowChanged != null)) {
                    this.PROD_PRODUCTOSRowChanged(this, new PROD_PRODUCTOSRowChangeEvent(((PROD_PRODUCTOSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PROD_PRODUCTOSRowChanging != null)) {
                    this.PROD_PRODUCTOSRowChanging(this, new PROD_PRODUCTOSRowChangeEvent(((PROD_PRODUCTOSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PROD_PRODUCTOSRowDeleted != null)) {
                    this.PROD_PRODUCTOSRowDeleted(this, new PROD_PRODUCTOSRowChangeEvent(((PROD_PRODUCTOSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PROD_PRODUCTOSRowDeleting != null)) {
                    this.PROD_PRODUCTOSRowDeleting(this, new PROD_PRODUCTOSRowChangeEvent(((PROD_PRODUCTOSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePROD_PRODUCTOSRow(PROD_PRODUCTOSRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DTDatosProductos ds = new DTDatosProductos();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PROD_PRODUCTOSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FAMI_FAMILIARow : global::System.Data.DataRow {
            
            private FAMI_FAMILIADataTable tableFAMI_FAMILIA;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FAMI_FAMILIARow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFAMI_FAMILIA = ((FAMI_FAMILIADataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string COD_FAMI {
                get {
                    try {
                        return ((string)(this[this.tableFAMI_FAMILIA.COD_FAMIColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'COD_FAMI\' de la tabla \'FAMI_FAMILIA\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableFAMI_FAMILIA.COD_FAMIColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NOMBRE_FAMI {
                get {
                    try {
                        return ((string)(this[this.tableFAMI_FAMILIA.NOMBRE_FAMIColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'NOMBRE_FAMI\' de la tabla \'FAMI_FAMILIA\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableFAMI_FAMILIA.NOMBRE_FAMIColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOD_FAMINull() {
                return this.IsNull(this.tableFAMI_FAMILIA.COD_FAMIColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOD_FAMINull() {
                this[this.tableFAMI_FAMILIA.COD_FAMIColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNOMBRE_FAMINull() {
                return this.IsNull(this.tableFAMI_FAMILIA.NOMBRE_FAMIColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNOMBRE_FAMINull() {
                this[this.tableFAMI_FAMILIA.NOMBRE_FAMIColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SUFA_SUB_FAMILIASRow[] GetSUFA_SUB_FAMILIASRows() {
                if ((this.Table.ChildRelations["FAMI_FAMILIA_SUFA_SUB_FAMILIAS"] == null)) {
                    return new SUFA_SUB_FAMILIASRow[0];
                }
                else {
                    return ((SUFA_SUB_FAMILIASRow[])(base.GetChildRows(this.Table.ChildRelations["FAMI_FAMILIA_SUFA_SUB_FAMILIAS"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SUFA_SUB_FAMILIASRow : global::System.Data.DataRow {
            
            private SUFA_SUB_FAMILIASDataTable tableSUFA_SUB_FAMILIAS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SUFA_SUB_FAMILIASRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSUFA_SUB_FAMILIAS = ((SUFA_SUB_FAMILIASDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string COD_FAMI {
                get {
                    try {
                        return ((string)(this[this.tableSUFA_SUB_FAMILIAS.COD_FAMIColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'COD_FAMI\' de la tabla \'SUFA_SUB_FAMILIAS\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableSUFA_SUB_FAMILIAS.COD_FAMIColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string COD_SUFA {
                get {
                    try {
                        return ((string)(this[this.tableSUFA_SUB_FAMILIAS.COD_SUFAColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'COD_SUFA\' de la tabla \'SUFA_SUB_FAMILIAS\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableSUFA_SUB_FAMILIAS.COD_SUFAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NOMBRE_SUFA {
                get {
                    try {
                        return ((string)(this[this.tableSUFA_SUB_FAMILIAS.NOMBRE_SUFAColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'NOMBRE_SUFA\' de la tabla \'SUFA_SUB_FAMILIAS\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableSUFA_SUB_FAMILIAS.NOMBRE_SUFAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FAMI_FAMILIARow FAMI_FAMILIARow {
                get {
                    return ((FAMI_FAMILIARow)(this.GetParentRow(this.Table.ParentRelations["FAMI_FAMILIA_SUFA_SUB_FAMILIAS"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FAMI_FAMILIA_SUFA_SUB_FAMILIAS"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOD_FAMINull() {
                return this.IsNull(this.tableSUFA_SUB_FAMILIAS.COD_FAMIColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOD_FAMINull() {
                this[this.tableSUFA_SUB_FAMILIAS.COD_FAMIColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOD_SUFANull() {
                return this.IsNull(this.tableSUFA_SUB_FAMILIAS.COD_SUFAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOD_SUFANull() {
                this[this.tableSUFA_SUB_FAMILIAS.COD_SUFAColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNOMBRE_SUFANull() {
                return this.IsNull(this.tableSUFA_SUB_FAMILIAS.NOMBRE_SUFAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNOMBRE_SUFANull() {
                this[this.tableSUFA_SUB_FAMILIAS.NOMBRE_SUFAColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROD_PRODUCTOSRow[] GetPROD_PRODUCTOSRows() {
                if ((this.Table.ChildRelations["SUFA_SUB_FAMILIAS_PROD_PRODUCTOS"] == null)) {
                    return new PROD_PRODUCTOSRow[0];
                }
                else {
                    return ((PROD_PRODUCTOSRow[])(base.GetChildRows(this.Table.ChildRelations["SUFA_SUB_FAMILIAS_PROD_PRODUCTOS"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PROD_PRODUCTOSRow : global::System.Data.DataRow {
            
            private PROD_PRODUCTOSDataTable tablePROD_PRODUCTOS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PROD_PRODUCTOSRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePROD_PRODUCTOS = ((PROD_PRODUCTOSDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long ID_ELEM {
                get {
                    try {
                        return ((long)(this[this.tablePROD_PRODUCTOS.ID_ELEMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'ID_ELEM\' de la tabla \'PROD_PRODUCTOS\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROD_PRODUCTOS.ID_ELEMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string COD_FAMI {
                get {
                    try {
                        return ((string)(this[this.tablePROD_PRODUCTOS.COD_FAMIColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'COD_FAMI\' de la tabla \'PROD_PRODUCTOS\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROD_PRODUCTOS.COD_FAMIColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string COD_SUFA {
                get {
                    try {
                        return ((string)(this[this.tablePROD_PRODUCTOS.COD_SUFAColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'COD_SUFA\' de la tabla \'PROD_PRODUCTOS\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROD_PRODUCTOS.COD_SUFAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string COD_BARRAS {
                get {
                    try {
                        return ((string)(this[this.tablePROD_PRODUCTOS.COD_BARRASColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'COD_BARRAS\' de la tabla \'PROD_PRODUCTOS\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROD_PRODUCTOS.COD_BARRASColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NOMBRE_PROD {
                get {
                    try {
                        return ((string)(this[this.tablePROD_PRODUCTOS.NOMBRE_PRODColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'NOMBRE_PROD\' de la tabla \'PROD_PRODUCTOS\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROD_PRODUCTOS.NOMBRE_PRODColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long EXISTENCIAS_PROD {
                get {
                    try {
                        return ((long)(this[this.tablePROD_PRODUCTOS.EXISTENCIAS_PRODColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'EXISTENCIAS_PROD\' de la tabla \'PROD_PRODUCTOS\' es DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tablePROD_PRODUCTOS.EXISTENCIAS_PRODColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SUFA_SUB_FAMILIASRow SUFA_SUB_FAMILIASRowParent {
                get {
                    return ((SUFA_SUB_FAMILIASRow)(this.GetParentRow(this.Table.ParentRelations["SUFA_SUB_FAMILIAS_PROD_PRODUCTOS"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["SUFA_SUB_FAMILIAS_PROD_PRODUCTOS"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsID_ELEMNull() {
                return this.IsNull(this.tablePROD_PRODUCTOS.ID_ELEMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetID_ELEMNull() {
                this[this.tablePROD_PRODUCTOS.ID_ELEMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOD_FAMINull() {
                return this.IsNull(this.tablePROD_PRODUCTOS.COD_FAMIColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOD_FAMINull() {
                this[this.tablePROD_PRODUCTOS.COD_FAMIColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOD_SUFANull() {
                return this.IsNull(this.tablePROD_PRODUCTOS.COD_SUFAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOD_SUFANull() {
                this[this.tablePROD_PRODUCTOS.COD_SUFAColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOD_BARRASNull() {
                return this.IsNull(this.tablePROD_PRODUCTOS.COD_BARRASColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOD_BARRASNull() {
                this[this.tablePROD_PRODUCTOS.COD_BARRASColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNOMBRE_PRODNull() {
                return this.IsNull(this.tablePROD_PRODUCTOS.NOMBRE_PRODColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNOMBRE_PRODNull() {
                this[this.tablePROD_PRODUCTOS.NOMBRE_PRODColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEXISTENCIAS_PRODNull() {
                return this.IsNull(this.tablePROD_PRODUCTOS.EXISTENCIAS_PRODColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEXISTENCIAS_PRODNull() {
                this[this.tablePROD_PRODUCTOS.EXISTENCIAS_PRODColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FAMI_FAMILIARowChangeEvent : global::System.EventArgs {
            
            private FAMI_FAMILIARow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FAMI_FAMILIARowChangeEvent(FAMI_FAMILIARow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FAMI_FAMILIARow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SUFA_SUB_FAMILIASRowChangeEvent : global::System.EventArgs {
            
            private SUFA_SUB_FAMILIASRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SUFA_SUB_FAMILIASRowChangeEvent(SUFA_SUB_FAMILIASRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SUFA_SUB_FAMILIASRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PROD_PRODUCTOSRowChangeEvent : global::System.EventArgs {
            
            private PROD_PRODUCTOSRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROD_PRODUCTOSRowChangeEvent(PROD_PRODUCTOSRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROD_PRODUCTOSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591